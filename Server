package Final;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.*;
import java.util.Random;
import Final.LinkedList;

/**
 * 
 * @author Nicholas Kosh
 * @author Scott Yuen
 * 
 * Server class with nested class ClientRequest, used to accept clients,
 * scramble received messages, and send messages to each client 
 */  
public class Server {
	private static LinkedList<DataOutputStream> clients = new LinkedList<>();
	private static String firstMessage;
	private static String lastMessage;
	private static Iterator<DataOutputStream> osIterator;

	static class ClientRequest implements Runnable {
		Socket connectionSocket;

		public ClientRequest(Socket socket) {
			this.connectionSocket = socket;
		}

		@Override
		public void run() {
			try {
				process();
			} catch (Exception e) {
				System.out.println(e);
			}
		}

		private void process() throws Exception {
			BufferedReader br = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));
			DataOutputStream os = new DataOutputStream(connectionSocket.getOutputStream());
			Random rand = new Random();

			os.writeBytes("Welcome to \"Unscramble the Message\"! Enter your name: \r\n");
			String clientName = br.readLine();

			os.writeBytes("Hello " + clientName + "!\r\n");
			os.writeBytes(clientName + " joined the game!\r\n");
			
			// adds client's output stream to linked list "clients"
			clients.add(os);
			
			System.out.println(clientName + " has joined the game!");
			
			// informs users of their role
			if (clients.getLength() == 1) {
				os.writeBytes("You are first in line, the original messenger, input the first message: \r\n");

			} else {
				os.writeBytes(
						"You are an unscrambler. Wait for a message to appear, and attempt to unscramble it.\r\n");
			}

			osIterator = clients.getIterator();
			
			// next() is called so that the first message is from 
			// the first client and sent to the second client
			osIterator.next();
			
			String clientMessage = null;
			while (true) {
				while (((clientMessage = br.readLine()) != null) && osIterator.hasNext()) {
					
					// stores first message for later comparison to last message
					if (os.equals(clients.getFirstOs())) {
						firstMessage = clientMessage;
					}
					System.out.println("Message: " + clientMessage);
					
					if (osIterator.hasNext()) {
						String[] array = clientMessage.split(" ");

						// for loop code block influenced by
						// https://www.journaldev.com/32661/shuffle-array-java
						// shuffles the array elements
						for (int i = 0; i < array.length; i++) {
							int randIndex = rand.nextInt(array.length);
							String temp = array[randIndex];
							array[randIndex] = array[i];
							array[i] = temp;
						}

						// uses chance to decide whether a word will be 
						// removed and replaced with a blank space
						int randomInt = rand.nextInt(100);
						if (randomInt > 55) {
							array[rand.nextInt(array.length)] = "_____";
						}

						// gets output stream of next client in line
						DataOutputStream outputStream = osIterator.next();
						
						// reassembles the scrambled string
						StringBuilder strBuilder = new StringBuilder();
						for (String string : array) {
							strBuilder.append(string + " ");
						}
						String scrambledMsg = strBuilder.toString();

						outputStream.writeBytes("Message: " + scrambledMsg + "\r\n");
					}
				}
				
				// stores last message for comparison
				lastMessage = clientMessage;
				
				System.out.println("Last Message: " + lastMessage);
				
				// win/loss outcomes
				for (DataOutputStream outputStream : clients) {
					if (lastMessage.toUpperCase().equals(firstMessage.toUpperCase())) {
						outputStream.writeBytes("The original message was: " + firstMessage + " \r\n");
						outputStream.writeBytes("The final message was: " + lastMessage + " \r\n");
						outputStream.writeBytes("You have won the game!\r\n");
					} else {
						outputStream.writeBytes("The original message was: " + firstMessage + " \r\n");
						outputStream.writeBytes("The final message was: " + lastMessage + " \r\n");
						outputStream.writeBytes("You have lost the game!\r\n");
					}
				}
			}
		}
	}

	public static void main(String[] args) throws IOException {
		ServerSocket serverSocket = new ServerSocket(1234);
		System.out.println("Waiting for connections...");

		while (true) {
			Socket connectionSocket = serverSocket.accept();

			ClientRequest request = new ClientRequest(connectionSocket);

			Thread thread = new Thread(request);
			thread.start();

		}

	}

}
