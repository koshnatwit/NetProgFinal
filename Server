package Final;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.*;
import java.util.Random;

public class Server {
	private static Map<String, DataOutputStream> clients = new HashMap<>();

	static class ClientRequest implements Runnable {
		Socket connectionSocket;

		public ClientRequest(Socket socket) {
			this.connectionSocket = socket;
		}

		@Override
		public void run() {
			try {
				process();
			} catch (Exception e) {
				System.out.println(e);
			}
		}

		private void process() throws Exception {
			BufferedReader br = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));
			DataOutputStream os = new DataOutputStream(connectionSocket.getOutputStream());
			Random rand = new Random();

			os.writeBytes("Welcome to \"Unscramble the Message\"! Enter your name: \r\n");
			String clientName = br.readLine();
			
			os.writeBytes("Hello " + clientName + "! Type \"{quit}\" to exit.\r\n");

			for (DataOutputStream outputStream : clients.values()) {
				outputStream.writeBytes(clientName + " joined the game!m\r\n");
			}

			clients.put(clientName, os);

			String clientMessage = null;
			while (true) {
				while ((clientMessage = br.readLine()) != "{quit}") {
					String[] array = clientMessage.split(" ");

					// for loop code block influenced by
					// https://www.journaldev.com/32661/shuffle-array-java
					for (int i = 0; i < array.length; i++) {
						int randIndex = rand.nextInt(array.length);
						String temp = array[randIndex];
						array[randIndex] = array[i];
						array[i] = temp;
					}

					int randomInt = rand.nextInt(100);
					if (randomInt > 80) {
						array[rand.nextInt(array.length)] = "";
					}

					// need to figure out how to send message to only next person in line
					os.writeBytes(array.toString());
				}
			}
		}
	}

	public static void main(String[] args) throws IOException {
		ServerSocket serverSocket = new ServerSocket(1234);
		System.out.println("Waiting for connections...");

		while (true) {
			Socket connectionSocket = serverSocket.accept();

			ClientRequest request = new ClientRequest(connectionSocket);

			Thread thread = new Thread(request);
			thread.start();

		}

	}

}
